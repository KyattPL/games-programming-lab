//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActionsAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionsAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionsAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsAsset"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""78ee4091-5438-4b24-b9ae-c2ff3a3eb113"",
            ""actions"": [
                {
                    ""name"": ""Run right"",
                    ""type"": ""Button"",
                    ""id"": ""30601f7f-fe9d-4047-89e2-08cf870bdbad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run left"",
                    ""type"": ""Button"",
                    ""id"": ""42b68ed8-8968-46d2-b2a3-b13d9884384d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2b5d48a4-92a7-48a3-85b6-aa57387e25bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e624cfc-af28-4b23-8d6f-c99e51e907f6"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccaf764f-11df-471c-a9a8-5d375ed4dbd0"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8157342c-9716-4216-87ab-2c4dccbe15c9"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cd0f2ce-334f-4476-9278-3fab7bec4c5c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Runright = m_PlayerActions.FindAction("Run right", throwIfNotFound: true);
        m_PlayerActions_Runleft = m_PlayerActions.FindAction("Run left", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_Runright;
    private readonly InputAction m_PlayerActions_Runleft;
    private readonly InputAction m_PlayerActions_Jump;
    public struct PlayerActionsActions
    {
        private @InputActionsAsset m_Wrapper;
        public PlayerActionsActions(@InputActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Runright => m_Wrapper.m_PlayerActions_Runright;
        public InputAction @Runleft => m_Wrapper.m_PlayerActions_Runleft;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @Runright.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRunright;
                @Runright.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRunright;
                @Runright.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRunright;
                @Runleft.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRunleft;
                @Runleft.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRunleft;
                @Runleft.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRunleft;
                @Jump.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Runright.started += instance.OnRunright;
                @Runright.performed += instance.OnRunright;
                @Runright.canceled += instance.OnRunright;
                @Runleft.started += instance.OnRunleft;
                @Runleft.performed += instance.OnRunleft;
                @Runleft.canceled += instance.OnRunleft;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    public interface IPlayerActionsActions
    {
        void OnRunright(InputAction.CallbackContext context);
        void OnRunleft(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
